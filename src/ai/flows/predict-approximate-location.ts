// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Predicts the approximate geographic location of a phone number.
 *
 * - predictApproximateLocation - A function that predicts the location of a phone number.
 * - PredictApproximateLocationInput - The input type for the predictApproximateLocation function.
 * - PredictApproximateLocationOutput - The return type for the predictApproximateLocation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictApproximateLocationInputSchema = z.object({
  phoneNumber: z.string().describe('The phone number to trace.'),
});
export type PredictApproximateLocationInput = z.infer<
  typeof PredictApproximateLocationInputSchema
>;

const PredictApproximateLocationOutputSchema = z.object({
  latitude: z
    .number()
    .describe('The predicted latitude of the phone number.'),
  longitude: z
    .number()
    .describe('The predicted longitude of the phone number.'),
  accuracyRadiusMeters: z
    .number()
    .describe(
      'The estimated accuracy radius in meters of the predicted location.'
    ),
  disclaimer: z
    .string()
    .describe(
      'A disclaimer about the limitations of the phone tracing service.'
    ),
});
export type PredictApproximateLocationOutput = z.infer<
  typeof PredictApproximateLocationOutputSchema
>;

export async function predictApproximateLocation(
  input: PredictApproximateLocationInput
): Promise<PredictApproximateLocationOutput> {
  return predictApproximateLocationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictApproximateLocationPrompt',
  input: {schema: PredictApproximateLocationInputSchema},
  output: {schema: PredictApproximateLocationOutputSchema},
  prompt: `You are a geolocation prediction expert. Given a phone number,
you will predict its approximate geographic location based on available
public information such as geographic calling patterns, area codes, and
crowd-sourced data, if available. Provide the latitude, longitude, and an
accuracy radius in meters. Also, include a disclaimer about the limitations
of this service. It is important to note that the predicted location is not
guaranteed to be accurate, and should be used for informational purposes
only.

Phone Number: {{{phoneNumber}}}

Output the result in JSON format.
`,
});

const predictApproximateLocationFlow = ai.defineFlow(
  {
    name: 'predictApproximateLocationFlow',
    inputSchema: PredictApproximateLocationInputSchema,
    outputSchema: PredictApproximateLocationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
